/*
 * Generated by dtrace(1M).
 */

#ifndef	_LIBNOIT_DTRACE_PROBES_H
#define	_LIBNOIT_DTRACE_PROBES_H

#include <unistd.h>

#ifdef	__cplusplus
extern "C" {
#endif

#define LIBNOIT_STABILITY "___dtrace_stability$libnoit$v1$1_1_0_1_1_0_1_1_0_1_1_0_1_1_0"

#define LIBNOIT_TYPEDEFS "___dtrace_typedefs$libnoit$v2"

#if !defined(DTRACE_PROBES_DISABLED) || !DTRACE_PROBES_DISABLED

#define	LIBNOIT_EVENTER_ACCEPT_ENTRY(arg0, arg1, arg2, arg3, arg4) \
do { \
	__asm__ volatile(".reference " LIBNOIT_TYPEDEFS); \
	__dtrace_probe$libnoit$eventer__accept__entry$v1$696e74$766f6964202a$696e74$696e74$766f6964202a(arg0, arg1, arg2, arg3, arg4); \
	__asm__ volatile(".reference " LIBNOIT_STABILITY); \
} while (0)
#define	LIBNOIT_EVENTER_ACCEPT_ENTRY_ENABLED() \
	({ int _r = __dtrace_isenabled$libnoit$eventer__accept__entry$v1(); \
		__asm__ volatile(""); \
		_r; })
#define	LIBNOIT_EVENTER_ACCEPT_RETURN(arg0, arg1, arg2, arg3, arg4, arg5) \
do { \
	__asm__ volatile(".reference " LIBNOIT_TYPEDEFS); \
	__dtrace_probe$libnoit$eventer__accept__return$v1$696e74$766f6964202a$696e74$696e74$766f6964202a$696e74(arg0, arg1, arg2, arg3, arg4, arg5); \
	__asm__ volatile(".reference " LIBNOIT_STABILITY); \
} while (0)
#define	LIBNOIT_EVENTER_ACCEPT_RETURN_ENABLED() \
	({ int _r = __dtrace_isenabled$libnoit$eventer__accept__return$v1(); \
		__asm__ volatile(""); \
		_r; })
#define	LIBNOIT_EVENTER_CALLBACK_ENTRY(arg0, arg1, arg2, arg3, arg4, arg5) \
do { \
	__asm__ volatile(".reference " LIBNOIT_TYPEDEFS); \
	__dtrace_probe$libnoit$eventer__callback__entry$v1$766f6964202a$766f6964202a$63686172202a$696e74$696e74$696e74(arg0, arg1, arg2, arg3, arg4, arg5); \
	__asm__ volatile(".reference " LIBNOIT_STABILITY); \
} while (0)
#define	LIBNOIT_EVENTER_CALLBACK_ENTRY_ENABLED() \
	({ int _r = __dtrace_isenabled$libnoit$eventer__callback__entry$v1(); \
		__asm__ volatile(""); \
		_r; })
#define	LIBNOIT_EVENTER_CALLBACK_RETURN(arg0, arg1, arg2, arg3) \
do { \
	__asm__ volatile(".reference " LIBNOIT_TYPEDEFS); \
	__dtrace_probe$libnoit$eventer__callback__return$v1$766f6964202a$766f6964202a$63686172202a$696e74(arg0, arg1, arg2, arg3); \
	__asm__ volatile(".reference " LIBNOIT_STABILITY); \
} while (0)
#define	LIBNOIT_EVENTER_CALLBACK_RETURN_ENABLED() \
	({ int _r = __dtrace_isenabled$libnoit$eventer__callback__return$v1(); \
		__asm__ volatile(""); \
		_r; })
#define	LIBNOIT_EVENTER_CLOSE_ENTRY(arg0, arg1, arg2) \
do { \
	__asm__ volatile(".reference " LIBNOIT_TYPEDEFS); \
	__dtrace_probe$libnoit$eventer__close__entry$v1$696e74$696e74$766f6964202a(arg0, arg1, arg2); \
	__asm__ volatile(".reference " LIBNOIT_STABILITY); \
} while (0)
#define	LIBNOIT_EVENTER_CLOSE_ENTRY_ENABLED() \
	({ int _r = __dtrace_isenabled$libnoit$eventer__close__entry$v1(); \
		__asm__ volatile(""); \
		_r; })
#define	LIBNOIT_EVENTER_CLOSE_RETURN(arg0, arg1, arg2, arg3) \
do { \
	__asm__ volatile(".reference " LIBNOIT_TYPEDEFS); \
	__dtrace_probe$libnoit$eventer__close__return$v1$696e74$696e74$766f6964202a$696e74(arg0, arg1, arg2, arg3); \
	__asm__ volatile(".reference " LIBNOIT_STABILITY); \
} while (0)
#define	LIBNOIT_EVENTER_CLOSE_RETURN_ENABLED() \
	({ int _r = __dtrace_isenabled$libnoit$eventer__close__return$v1(); \
		__asm__ volatile(""); \
		_r; })
#define	LIBNOIT_EVENTER_READ_ENTRY(arg0, arg1, arg2, arg3, arg4) \
do { \
	__asm__ volatile(".reference " LIBNOIT_TYPEDEFS); \
	__dtrace_probe$libnoit$eventer__read__entry$v1$696e74$63686172202a$73697a655f74$696e74$766f6964202a(arg0, arg1, arg2, arg3, arg4); \
	__asm__ volatile(".reference " LIBNOIT_STABILITY); \
} while (0)
#define	LIBNOIT_EVENTER_READ_ENTRY_ENABLED() \
	({ int _r = __dtrace_isenabled$libnoit$eventer__read__entry$v1(); \
		__asm__ volatile(""); \
		_r; })
#define	LIBNOIT_EVENTER_READ_RETURN(arg0, arg1, arg2, arg3, arg4, arg5) \
do { \
	__asm__ volatile(".reference " LIBNOIT_TYPEDEFS); \
	__dtrace_probe$libnoit$eventer__read__return$v1$696e74$63686172202a$73697a655f74$696e74$766f6964202a$696e74(arg0, arg1, arg2, arg3, arg4, arg5); \
	__asm__ volatile(".reference " LIBNOIT_STABILITY); \
} while (0)
#define	LIBNOIT_EVENTER_READ_RETURN_ENABLED() \
	({ int _r = __dtrace_isenabled$libnoit$eventer__read__return$v1(); \
		__asm__ volatile(""); \
		_r; })
#define	LIBNOIT_EVENTER_WRITE_ENTRY(arg0, arg1, arg2, arg3, arg4) \
do { \
	__asm__ volatile(".reference " LIBNOIT_TYPEDEFS); \
	__dtrace_probe$libnoit$eventer__write__entry$v1$696e74$63686172202a$73697a655f74$696e74$766f6964202a(arg0, arg1, arg2, arg3, arg4); \
	__asm__ volatile(".reference " LIBNOIT_STABILITY); \
} while (0)
#define	LIBNOIT_EVENTER_WRITE_ENTRY_ENABLED() \
	({ int _r = __dtrace_isenabled$libnoit$eventer__write__entry$v1(); \
		__asm__ volatile(""); \
		_r; })
#define	LIBNOIT_EVENTER_WRITE_RETURN(arg0, arg1, arg2, arg3, arg4, arg5) \
do { \
	__asm__ volatile(".reference " LIBNOIT_TYPEDEFS); \
	__dtrace_probe$libnoit$eventer__write__return$v1$696e74$63686172202a$73697a655f74$696e74$766f6964202a$696e74(arg0, arg1, arg2, arg3, arg4, arg5); \
	__asm__ volatile(".reference " LIBNOIT_STABILITY); \
} while (0)
#define	LIBNOIT_EVENTER_WRITE_RETURN_ENABLED() \
	({ int _r = __dtrace_isenabled$libnoit$eventer__write__return$v1(); \
		__asm__ volatile(""); \
		_r; })
#define	LIBNOIT_LOG(arg0, arg1, arg2, arg3) \
do { \
	__asm__ volatile(".reference " LIBNOIT_TYPEDEFS); \
	__dtrace_probe$libnoit$log$v1$63686172202a$63686172202a$696e74$63686172202a(arg0, arg1, arg2, arg3); \
	__asm__ volatile(".reference " LIBNOIT_STABILITY); \
} while (0)
#define	LIBNOIT_LOG_ENABLED() \
	({ int _r = __dtrace_isenabled$libnoit$log$v1(); \
		__asm__ volatile(""); \
		_r; })
#define	LIBNOIT_REVERSE_CONNECT(arg0, arg1, arg2) \
do { \
	__asm__ volatile(".reference " LIBNOIT_TYPEDEFS); \
	__dtrace_probe$libnoit$reverse__connect$v1$696e74$63686172202a$63686172202a(arg0, arg1, arg2); \
	__asm__ volatile(".reference " LIBNOIT_STABILITY); \
} while (0)
#define	LIBNOIT_REVERSE_CONNECT_ENABLED() \
	({ int _r = __dtrace_isenabled$libnoit$reverse__connect$v1(); \
		__asm__ volatile(""); \
		_r; })
#define	LIBNOIT_REVERSE_CONNECT_CLOSE(arg0, arg1, arg2, arg3, arg4) \
do { \
	__asm__ volatile(".reference " LIBNOIT_TYPEDEFS); \
	__dtrace_probe$libnoit$reverse__connect__close$v1$696e74$63686172202a$63686172202a$696e74$696e74(arg0, arg1, arg2, arg3, arg4); \
	__asm__ volatile(".reference " LIBNOIT_STABILITY); \
} while (0)
#define	LIBNOIT_REVERSE_CONNECT_CLOSE_ENABLED() \
	({ int _r = __dtrace_isenabled$libnoit$reverse__connect__close$v1(); \
		__asm__ volatile(""); \
		_r; })
#define	LIBNOIT_REVERSE_CONNECT_FAILED(arg0, arg1, arg2, arg3) \
do { \
	__asm__ volatile(".reference " LIBNOIT_TYPEDEFS); \
	__dtrace_probe$libnoit$reverse__connect__failed$v1$696e74$63686172202a$63686172202a$696e74(arg0, arg1, arg2, arg3); \
	__asm__ volatile(".reference " LIBNOIT_STABILITY); \
} while (0)
#define	LIBNOIT_REVERSE_CONNECT_FAILED_ENABLED() \
	({ int _r = __dtrace_isenabled$libnoit$reverse__connect__failed$v1(); \
		__asm__ volatile(""); \
		_r; })
#define	LIBNOIT_REVERSE_CONNECT_SSL(arg0, arg1, arg2) \
do { \
	__asm__ volatile(".reference " LIBNOIT_TYPEDEFS); \
	__dtrace_probe$libnoit$reverse__connect__ssl$v1$696e74$63686172202a$63686172202a(arg0, arg1, arg2); \
	__asm__ volatile(".reference " LIBNOIT_STABILITY); \
} while (0)
#define	LIBNOIT_REVERSE_CONNECT_SSL_ENABLED() \
	({ int _r = __dtrace_isenabled$libnoit$reverse__connect__ssl$v1(); \
		__asm__ volatile(""); \
		_r; })
#define	LIBNOIT_REVERSE_CONNECT_SSL_FAILED(arg0, arg1, arg2, arg3, arg4) \
do { \
	__asm__ volatile(".reference " LIBNOIT_TYPEDEFS); \
	__dtrace_probe$libnoit$reverse__connect__ssl__failed$v1$696e74$63686172202a$63686172202a$63686172202a$696e74(arg0, arg1, arg2, arg3, arg4); \
	__asm__ volatile(".reference " LIBNOIT_STABILITY); \
} while (0)
#define	LIBNOIT_REVERSE_CONNECT_SSL_FAILED_ENABLED() \
	({ int _r = __dtrace_isenabled$libnoit$reverse__connect__ssl__failed$v1(); \
		__asm__ volatile(""); \
		_r; })
#define	LIBNOIT_REVERSE_CONNECT_SSL_SUCCESS(arg0, arg1, arg2) \
do { \
	__asm__ volatile(".reference " LIBNOIT_TYPEDEFS); \
	__dtrace_probe$libnoit$reverse__connect__ssl__success$v1$696e74$63686172202a$63686172202a(arg0, arg1, arg2); \
	__asm__ volatile(".reference " LIBNOIT_STABILITY); \
} while (0)
#define	LIBNOIT_REVERSE_CONNECT_SSL_SUCCESS_ENABLED() \
	({ int _r = __dtrace_isenabled$libnoit$reverse__connect__ssl__success$v1(); \
		__asm__ volatile(""); \
		_r; })
#define	LIBNOIT_REVERSE_CONNECT_SUCCESS(arg0, arg1, arg2) \
do { \
	__asm__ volatile(".reference " LIBNOIT_TYPEDEFS); \
	__dtrace_probe$libnoit$reverse__connect__success$v1$696e74$63686172202a$63686172202a(arg0, arg1, arg2); \
	__asm__ volatile(".reference " LIBNOIT_STABILITY); \
} while (0)
#define	LIBNOIT_REVERSE_CONNECT_SUCCESS_ENABLED() \
	({ int _r = __dtrace_isenabled$libnoit$reverse__connect__success$v1(); \
		__asm__ volatile(""); \
		_r; })
#define	LIBNOIT_REVERSE_RESCHEDULE(arg0, arg1, arg2, arg3) \
do { \
	__asm__ volatile(".reference " LIBNOIT_TYPEDEFS); \
	__dtrace_probe$libnoit$reverse__reschedule$v1$696e74$63686172202a$63686172202a$696e74(arg0, arg1, arg2, arg3); \
	__asm__ volatile(".reference " LIBNOIT_STABILITY); \
} while (0)
#define	LIBNOIT_REVERSE_RESCHEDULE_ENABLED() \
	({ int _r = __dtrace_isenabled$libnoit$reverse__reschedule$v1(); \
		__asm__ volatile(""); \
		_r; })
#define	LIBNOIT_REVERSE_SHUTDOWN_PERMANENT(arg0, arg1, arg2) \
do { \
	__asm__ volatile(".reference " LIBNOIT_TYPEDEFS); \
	__dtrace_probe$libnoit$reverse__shutdown__permanent$v1$696e74$63686172202a$63686172202a(arg0, arg1, arg2); \
	__asm__ volatile(".reference " LIBNOIT_STABILITY); \
} while (0)
#define	LIBNOIT_REVERSE_SHUTDOWN_PERMANENT_ENABLED() \
	({ int _r = __dtrace_isenabled$libnoit$reverse__shutdown__permanent$v1(); \
		__asm__ volatile(""); \
		_r; })


extern void __dtrace_probe$libnoit$eventer__accept__entry$v1$696e74$766f6964202a$696e74$696e74$766f6964202a(int, const void *, int, int, const void *);
extern int __dtrace_isenabled$libnoit$eventer__accept__entry$v1(void);
extern void __dtrace_probe$libnoit$eventer__accept__return$v1$696e74$766f6964202a$696e74$696e74$766f6964202a$696e74(int, const void *, int, int, const void *, int);
extern int __dtrace_isenabled$libnoit$eventer__accept__return$v1(void);
extern void __dtrace_probe$libnoit$eventer__callback__entry$v1$766f6964202a$766f6964202a$63686172202a$696e74$696e74$696e74(const void *, const void *, const char *, int, int, int);
extern int __dtrace_isenabled$libnoit$eventer__callback__entry$v1(void);
extern void __dtrace_probe$libnoit$eventer__callback__return$v1$766f6964202a$766f6964202a$63686172202a$696e74(const void *, const void *, const char *, int);
extern int __dtrace_isenabled$libnoit$eventer__callback__return$v1(void);
extern void __dtrace_probe$libnoit$eventer__close__entry$v1$696e74$696e74$766f6964202a(int, int, const void *);
extern int __dtrace_isenabled$libnoit$eventer__close__entry$v1(void);
extern void __dtrace_probe$libnoit$eventer__close__return$v1$696e74$696e74$766f6964202a$696e74(int, int, const void *, int);
extern int __dtrace_isenabled$libnoit$eventer__close__return$v1(void);
extern void __dtrace_probe$libnoit$eventer__read__entry$v1$696e74$63686172202a$73697a655f74$696e74$766f6964202a(int, const char *, size_t, int, const void *);
extern int __dtrace_isenabled$libnoit$eventer__read__entry$v1(void);
extern void __dtrace_probe$libnoit$eventer__read__return$v1$696e74$63686172202a$73697a655f74$696e74$766f6964202a$696e74(int, const char *, size_t, int, const void *, int);
extern int __dtrace_isenabled$libnoit$eventer__read__return$v1(void);
extern void __dtrace_probe$libnoit$eventer__write__entry$v1$696e74$63686172202a$73697a655f74$696e74$766f6964202a(int, const char *, size_t, int, const void *);
extern int __dtrace_isenabled$libnoit$eventer__write__entry$v1(void);
extern void __dtrace_probe$libnoit$eventer__write__return$v1$696e74$63686172202a$73697a655f74$696e74$766f6964202a$696e74(int, const char *, size_t, int, const void *, int);
extern int __dtrace_isenabled$libnoit$eventer__write__return$v1(void);
extern void __dtrace_probe$libnoit$log$v1$63686172202a$63686172202a$696e74$63686172202a(const char *, const char *, int, const char *);
extern int __dtrace_isenabled$libnoit$log$v1(void);
extern void __dtrace_probe$libnoit$reverse__connect$v1$696e74$63686172202a$63686172202a(int, const char *, const char *);
extern int __dtrace_isenabled$libnoit$reverse__connect$v1(void);
extern void __dtrace_probe$libnoit$reverse__connect__close$v1$696e74$63686172202a$63686172202a$696e74$696e74(int, const char *, const char *, int, int);
extern int __dtrace_isenabled$libnoit$reverse__connect__close$v1(void);
extern void __dtrace_probe$libnoit$reverse__connect__failed$v1$696e74$63686172202a$63686172202a$696e74(int, const char *, const char *, int);
extern int __dtrace_isenabled$libnoit$reverse__connect__failed$v1(void);
extern void __dtrace_probe$libnoit$reverse__connect__ssl$v1$696e74$63686172202a$63686172202a(int, const char *, const char *);
extern int __dtrace_isenabled$libnoit$reverse__connect__ssl$v1(void);
extern void __dtrace_probe$libnoit$reverse__connect__ssl__failed$v1$696e74$63686172202a$63686172202a$63686172202a$696e74(int, const char *, const char *, const char *, int);
extern int __dtrace_isenabled$libnoit$reverse__connect__ssl__failed$v1(void);
extern void __dtrace_probe$libnoit$reverse__connect__ssl__success$v1$696e74$63686172202a$63686172202a(int, const char *, const char *);
extern int __dtrace_isenabled$libnoit$reverse__connect__ssl__success$v1(void);
extern void __dtrace_probe$libnoit$reverse__connect__success$v1$696e74$63686172202a$63686172202a(int, const char *, const char *);
extern int __dtrace_isenabled$libnoit$reverse__connect__success$v1(void);
extern void __dtrace_probe$libnoit$reverse__reschedule$v1$696e74$63686172202a$63686172202a$696e74(int, const char *, const char *, int);
extern int __dtrace_isenabled$libnoit$reverse__reschedule$v1(void);
extern void __dtrace_probe$libnoit$reverse__shutdown__permanent$v1$696e74$63686172202a$63686172202a(int, const char *, const char *);
extern int __dtrace_isenabled$libnoit$reverse__shutdown__permanent$v1(void);

#else

#define	LIBNOIT_EVENTER_ACCEPT_ENTRY(arg0, arg1, arg2, arg3, arg4) \
do { \
	} while (0)
#define	LIBNOIT_EVENTER_ACCEPT_ENTRY_ENABLED() (0)
#define	LIBNOIT_EVENTER_ACCEPT_RETURN(arg0, arg1, arg2, arg3, arg4, arg5) \
do { \
	} while (0)
#define	LIBNOIT_EVENTER_ACCEPT_RETURN_ENABLED() (0)
#define	LIBNOIT_EVENTER_CALLBACK_ENTRY(arg0, arg1, arg2, arg3, arg4, arg5) \
do { \
	} while (0)
#define	LIBNOIT_EVENTER_CALLBACK_ENTRY_ENABLED() (0)
#define	LIBNOIT_EVENTER_CALLBACK_RETURN(arg0, arg1, arg2, arg3) \
do { \
	} while (0)
#define	LIBNOIT_EVENTER_CALLBACK_RETURN_ENABLED() (0)
#define	LIBNOIT_EVENTER_CLOSE_ENTRY(arg0, arg1, arg2) \
do { \
	} while (0)
#define	LIBNOIT_EVENTER_CLOSE_ENTRY_ENABLED() (0)
#define	LIBNOIT_EVENTER_CLOSE_RETURN(arg0, arg1, arg2, arg3) \
do { \
	} while (0)
#define	LIBNOIT_EVENTER_CLOSE_RETURN_ENABLED() (0)
#define	LIBNOIT_EVENTER_READ_ENTRY(arg0, arg1, arg2, arg3, arg4) \
do { \
	} while (0)
#define	LIBNOIT_EVENTER_READ_ENTRY_ENABLED() (0)
#define	LIBNOIT_EVENTER_READ_RETURN(arg0, arg1, arg2, arg3, arg4, arg5) \
do { \
	} while (0)
#define	LIBNOIT_EVENTER_READ_RETURN_ENABLED() (0)
#define	LIBNOIT_EVENTER_WRITE_ENTRY(arg0, arg1, arg2, arg3, arg4) \
do { \
	} while (0)
#define	LIBNOIT_EVENTER_WRITE_ENTRY_ENABLED() (0)
#define	LIBNOIT_EVENTER_WRITE_RETURN(arg0, arg1, arg2, arg3, arg4, arg5) \
do { \
	} while (0)
#define	LIBNOIT_EVENTER_WRITE_RETURN_ENABLED() (0)
#define	LIBNOIT_LOG(arg0, arg1, arg2, arg3) \
do { \
	} while (0)
#define	LIBNOIT_LOG_ENABLED() (0)
#define	LIBNOIT_REVERSE_CONNECT(arg0, arg1, arg2) \
do { \
	} while (0)
#define	LIBNOIT_REVERSE_CONNECT_ENABLED() (0)
#define	LIBNOIT_REVERSE_CONNECT_CLOSE(arg0, arg1, arg2, arg3, arg4) \
do { \
	} while (0)
#define	LIBNOIT_REVERSE_CONNECT_CLOSE_ENABLED() (0)
#define	LIBNOIT_REVERSE_CONNECT_FAILED(arg0, arg1, arg2, arg3) \
do { \
	} while (0)
#define	LIBNOIT_REVERSE_CONNECT_FAILED_ENABLED() (0)
#define	LIBNOIT_REVERSE_CONNECT_SSL(arg0, arg1, arg2) \
do { \
	} while (0)
#define	LIBNOIT_REVERSE_CONNECT_SSL_ENABLED() (0)
#define	LIBNOIT_REVERSE_CONNECT_SSL_FAILED(arg0, arg1, arg2, arg3, arg4) \
do { \
	} while (0)
#define	LIBNOIT_REVERSE_CONNECT_SSL_FAILED_ENABLED() (0)
#define	LIBNOIT_REVERSE_CONNECT_SSL_SUCCESS(arg0, arg1, arg2) \
do { \
	} while (0)
#define	LIBNOIT_REVERSE_CONNECT_SSL_SUCCESS_ENABLED() (0)
#define	LIBNOIT_REVERSE_CONNECT_SUCCESS(arg0, arg1, arg2) \
do { \
	} while (0)
#define	LIBNOIT_REVERSE_CONNECT_SUCCESS_ENABLED() (0)
#define	LIBNOIT_REVERSE_RESCHEDULE(arg0, arg1, arg2, arg3) \
do { \
	} while (0)
#define	LIBNOIT_REVERSE_RESCHEDULE_ENABLED() (0)
#define	LIBNOIT_REVERSE_SHUTDOWN_PERMANENT(arg0, arg1, arg2) \
do { \
	} while (0)
#define	LIBNOIT_REVERSE_SHUTDOWN_PERMANENT_ENABLED() (0)

#endif /* !defined(DTRACE_PROBES_DISABLED) || !DTRACE_PROBES_DISABLED */


#ifdef	__cplusplus
}
#endif

#endif	/* _LIBNOIT_DTRACE_PROBES_H */
